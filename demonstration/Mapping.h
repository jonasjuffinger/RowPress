#include <inttypes.h>

/**
 * Stateful class to decode address mappings
 * Yanks a lot of code from Blacksmith: https://github.com/comsec-group/blacksmith
 */

#define CHANS(x) ((x) << (8UL * 3UL))
#define DIMMS(x) ((x) << (8UL * 2UL))
#define RANKS(x) ((x) << (8UL * 1UL))
#define BANKS(x) ((x) << (8UL * 0UL))

static const int MTX_SIZE = 30;

struct MemConfiguration {
  int IDENTIFIER;
  int BK_SHIFT;
  int BK_MASK;
  int ROW_SHIFT;
  int ROW_MASK;
  int COL_SHIFT;
  int COL_MASK;
  int DRAM_MTX[MTX_SIZE];
  int ADDR_MTX[MTX_SIZE];
};


class Mapping
{
private:
    int bank;
    int row;
    int column;

    struct MemConfiguration dual_rank_comet_lake_s = {
      .IDENTIFIER = (CHANS(1UL) | DIMMS(1UL) | RANKS(2UL) | BANKS(16UL)),
      .BK_SHIFT =  25,
      .BK_MASK =  (0b11111),
      .ROW_SHIFT =  0,
      .ROW_MASK =  (0b111111111111),
      .COL_SHIFT =  12,
      .COL_MASK =  (0b1111111111111),
      .DRAM_MTX =  {
          0b000000000000000010000001000000,
          0b000000000001000100000000000000,
          0b000000000010001000000000000000,
          0b000000000100010000000000000000,
          0b000000001000100000000000000000,
          0b000000000000000010000000000000,
          0b000000000000000001000000000000,
          0b000000000000000000100000000000,
          0b000000000000000000010000000000,
          0b000000000000000000001000000000,
          0b000000000000000000000100000000,
          0b000000000000000000000010000000,
          0b000000000000000000000000100000,
          0b000000000000000000000000010000,
          0b000000000000000000000000001000,
          0b000000000000000000000000000100,
          0b000000000000000000000000000010,
          0b000000000000000000000000000001,
          0b100000000000000000000000000000,
          0b010000000000000000000000000000,
          0b001000000000000000000000000000,
          0b000100000000000000000000000000,
          0b000010000000000000000000000000,
          0b000001000000000000000000000000,
          0b000000100000000000000000000000,
          0b000000010000000000000000000000,
          0b000000001000000000000000000000,
          0b000000000100000000000000000000,
          0b000000000010000000000000000000,
          0b000000000001000000000000000000
      },
      .ADDR_MTX =  {
          0b000000000000000000100000000000,
          0b000000000000000000010000000000,
          0b000000000000000000001000000000,
          0b000000000000000000000100000000,
          0b000000000000000000000010000000,
          0b000000000000000000000001000000,
          0b000000000000000000000000100000,
          0b000000000000000000000000010000,
          0b000000000000000000000000001000,
          0b000000000000000000000000000100,
          0b000000000000000000000000000010,
          0b000000000000000000000000000001,
          0b000010000000000000000000001000,
          0b000100000000000000000000000100,
          0b001000000000000000000000000010,
          0b010000000000000000000000000001,
          0b000001000000000000000000000000,
          0b000000100000000000000000000000,
          0b000000010000000000000000000000,
          0b000000001000000000000000000000,
          0b000000000100000000000000000000,
          0b000000000010000000000000000000,
          0b000000000001000000000000000000,
          0b100001000000000000000000000000,
          0b000000000000100000000000000000,
          0b000000000000010000000000000000,
          0b000000000000001000000000000000,
          0b000000000000000100000000000000,
          0b000000000000000010000000000000,
          0b000000000000000001000000000000
      }
    };

    struct MemConfiguration single_rank_coffee_lake = {
      .IDENTIFIER = (CHANS(1UL) | DIMMS(1UL) | RANKS(1UL) | BANKS(16UL)),
      .BK_SHIFT =  26,
      .BK_MASK =  (0b1111),
      .ROW_SHIFT =  0,
      .ROW_MASK =  (0b1111111111111),
      .COL_SHIFT =  13,
      .COL_MASK =  (0b1111111111111),
      /* maps a virtual addr -> DRAM addr: bank (4 bits) | col (13 bits) | row (13 bits) */
      .DRAM_MTX =  {
          0b000000000000000010000001000000, /* 0x02040 bank b3 = addr b6 + b13 */
          0b000000000000100100000000000000, /* 0x24000 bank b2 = addr b14 + b17 */
          0b000000000001001000000000000000, /* 0x48000 bank b1 = addr b15 + b18 */
          0b000000000010010000000000000000, /* 0x90000 bank b0 = addr b16 + b19 */
          0b000000000000000010000000000000, /* col b12 = addr b13 */
          0b000000000000000001000000000000, /* col b11 = addr b12 */
          0b000000000000000000100000000000, /* col b10 = addr b11 */
          0b000000000000000000010000000000, /* col b9 = addr b10 */
          0b000000000000000000001000000000, /* col b8 = addr b9 */
          0b000000000000000000000100000000, /* col b7 = addr b8*/
          0b000000000000000000000010000000, /* col b6 = addr b7 */
          0b000000000000000000000000100000, /* col b5 = addr b5 */
          0b000000000000000000000000010000, /* col b4 = addr b4*/
          0b000000000000000000000000001000, /* col b3 = addr b3 */
          0b000000000000000000000000000100, /* col b2 = addr b2 */
          0b000000000000000000000000000010, /* col b1 = addr b1 */
          0b000000000000000000000000000001, /* col b0 = addr b0*/
          0b100000000000000000000000000000, /* row b12 = addr b29 */
          0b010000000000000000000000000000, /* row b11 = addr b28 */
          0b001000000000000000000000000000, /* row b10 = addr b27 */
          0b000100000000000000000000000000, /* row b9 = addr b26 */
          0b000010000000000000000000000000, /* row b8 = addr b25 */
          0b000001000000000000000000000000, /* row b7 = addr b24 */
          0b000000100000000000000000000000, /* row b6 = addr b23 */
          0b000000010000000000000000000000, /* row b5 = addr b22 */
          0b000000001000000000000000000000, /* row b4 = addr b21 */
          0b000000000100000000000000000000, /* row b3 = addr b20 */
          0b000000000010000000000000000000, /* row b2 = addr b19 */
          0b000000000001000000000000000000, /* row b1 = addr b18 */
          0b000000000000100000000000000000, /* row b0 = addr b17 */
          },
      /* maps a DRAM addr (bank | col | row) --> virtual addr */
      .ADDR_MTX =  {
          0b000000000000000001000000000000, /* addr b29 = row b12 */
          0b000000000000000000100000000000, /* addr b28 = row b11 */
          0b000000000000000000010000000000, /* addr b27 = row b10 */
          0b000000000000000000001000000000, /* addr b26 = row b9 */
          0b000000000000000000000100000000, /* addr b25 = row b8 */
          0b000000000000000000000010000000, /* addr b24 = row b7 */
          0b000000000000000000000001000000, /* addr b23 = row b6 */
          0b000000000000000000000000100000, /* addr b22 = row b5 */
          0b000000000000000000000000010000, /* addr b21 = row b4 */
          0b000000000000000000000000001000, /* addr b20 = row b3 */
          0b000000000000000000000000000100, /* addr b19 = row b2 */
          0b000000000000000000000000000010, /* addr b18 = row b1 */
          0b000000000000000000000000000001, /* addr b17 = row b0 */
          0b000100000000000000000000000100, /* addr b16 = bank b0 + row b2 (addr b19) */
          0b001000000000000000000000000010, /* addr b15 = bank b1 + row b1 (addr b18) */
          0b010000000000000000000000000001, /* addr b14 = bank b2 + row b0 (addr b17) */
          0b000010000000000000000000000000, /* addr b13 = col b12 */
          0b000001000000000000000000000000, /* addr b12 = col b11 */
          0b000000100000000000000000000000, /* addr b11 = col b10 */
          0b000000010000000000000000000000, /* addr b10 = col b9 */
          0b000000001000000000000000000000, /* addr b9 = col b8 */
          0b000000000100000000000000000000, /* addr b8 = col b7 */
          0b000000000010000000000000000000, /* addr b7 = col b6 */
          0b100010000000000000000000000000, /* addr b6 = bank b3 + col b12 (addr b13)*/
          0b000000000001000000000000000000, /* addr b5 = col b5 */
          0b000000000000100000000000000000, /* addr b4 = col b4 */
          0b000000000000010000000000000000, /* addr b3 = col b3 */
          0b000000000000001000000000000000, /* addr b2 = col b2 */
          0b000000000000000100000000000000, /* addr b1 = col b1 */
          0b000000000000000010000000000000  /* addr b0 = col b0 */
      }
    };
    struct MemConfiguration dual_rank_coffee_lake = {
      .IDENTIFIER = (CHANS(1UL) | DIMMS(1UL) | RANKS(2UL) | BANKS(16UL)),
      .BK_SHIFT =  25,
      .BK_MASK =  (0b11111),
      .ROW_SHIFT =  0,
      .ROW_MASK =  (0b111111111111),
      .COL_SHIFT =  12,
      .COL_MASK =  (0b1111111111111),
      .DRAM_MTX =  {
          0b000000000000000010000001000000,
          0b000000000001000100000000000000,
          0b000000000010001000000000000000,
          0b000000000100010000000000000000,
          0b000000001000100000000000000000,
          0b000000000000000010000000000000,
          0b000000000000000001000000000000,
          0b000000000000000000100000000000,
          0b000000000000000000010000000000,
          0b000000000000000000001000000000,
          0b000000000000000000000100000000,
          0b000000000000000000000010000000,
          0b000000000000000000000000100000,
          0b000000000000000000000000010000,
          0b000000000000000000000000001000,
          0b000000000000000000000000000100,
          0b000000000000000000000000000010,
          0b000000000000000000000000000001,
          0b100000000000000000000000000000,
          0b010000000000000000000000000000,
          0b001000000000000000000000000000,
          0b000100000000000000000000000000,
          0b000010000000000000000000000000,
          0b000001000000000000000000000000,
          0b000000100000000000000000000000,
          0b000000010000000000000000000000,
          0b000000001000000000000000000000,
          0b000000000100000000000000000000,
          0b000000000010000000000000000000,
          0b000000000001000000000000000000
      },
      .ADDR_MTX =  {
          0b000000000000000000100000000000,
          0b000000000000000000010000000000,
          0b000000000000000000001000000000,
          0b000000000000000000000100000000,
          0b000000000000000000000010000000,
          0b000000000000000000000001000000,
          0b000000000000000000000000100000,
          0b000000000000000000000000010000,
          0b000000000000000000000000001000,
          0b000000000000000000000000000100,
          0b000000000000000000000000000010,
          0b000000000000000000000000000001,
          0b000010000000000000000000001000,
          0b000100000000000000000000000100,
          0b001000000000000000000000000010,
          0b010000000000000000000000000001,
          0b000001000000000000000000000000,
          0b000000100000000000000000000000,
          0b000000010000000000000000000000,
          0b000000001000000000000000000000,
          0b000000000100000000000000000000,
          0b000000000010000000000000000000,
          0b000000000001000000000000000000,
          0b100001000000000000000000000000,
          0b000000000000100000000000000000,
          0b000000000000010000000000000000,
          0b000000000000001000000000000000,
          0b000000000000000100000000000000,
          0b000000000000000010000000000000,
          0b000000000000000001000000000000
      }
    };

    struct MemConfiguration *mem_configuration;

public:
    Mapping(): mem_configuration(&single_rank_coffee_lake) {};

    // copy constructor for mapping
    Mapping (const Mapping &m) : mem_configuration(m.mem_configuration)
    {
        this->bank = m.bank;
        this->row = m.row;
        this->column = m.column;
    }

    static uintptr_t base_address;
    
    int get_column();
    int get_bank();
    int get_row();

    int linearize();

    void increment_row();
    void increment_column_dw();
    void increment_column_cb();
    void reset_column();
    void increment_bank();
    void decrement_row();

    uintptr_t to_virt();

    void decode_new_address(uintptr_t addr);

};
